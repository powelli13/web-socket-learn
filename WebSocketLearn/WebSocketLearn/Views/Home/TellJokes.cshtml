@{
    ViewData["Title"] = "Knock, knock.";
}
<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>

<div>
    <div>
        <div>Controls</div>
        <div>
            Server Status: <span id="serverStatus">Disconnected</span>
        </div>
        <div>
            <input id="connectionUrl" enabled="false" />
            <button id="connectButton" type="submit">Connect</button>
            <button id="closeButton" type="submit" enabled="false">Close</button>
        </div>
        <div class="chat-wrapper">
            <div class="chat-log-wrapper" id="chatLogWrapper">
                <div id="chatLog"></div>
            </div>
            <div class="chat-input-wrapper">
                <input id="chatMessage" />
                <button id="sendChatButton" type="submit">Send</button>
            </div>
        </div>
    </div>
    <script>
        var receivedLog = document.getElementById("receivedLog");
        var serverStatus = document.getElementById("serverStatus");
        var chatLogWrapper = document.getElementById("chatLogWrapper");
        var chatLog = document.getElementById("chatLog");
        
        var connectButton = document.getElementById("connectButton");
        var sendChatButton = document.getElementById("sendChatButton");

        var chatMessage = document.getElementById("chatMessage");
        var socket;

        var scheme = document.location.protocol === "https:" ? "wss" : "ws";
        var port = document.location.port ? (":" + document.location.port) : "";
        connectionUrl.value = scheme + "://" + document.location.hostname + port + "/kkws";

        connectButton.addEventListener("click", function () {
            socket = new WebSocket(connectionUrl.value);

            socket.onopen = function (event) {
                serverStatus.innerHTML = 'Connected';
            };
            socket.onclose = function (event) {
                serverStatus.innerHTML = 'Disconnected';
            };
            socket.onmessage = function (event) {
                chatLog.innerHTML += '<div class="server-chat-entry chat-entry">' + htmlEscape(event.data) + '</div>';
                chatLogWrapper.scrollTop = chatLogWrapper.scrollHeight;
            };
        });

        chatMessage.addEventListener("keyup", function (e) {
            if (e.keyCode == 13) {
                if (!socket || socket.readyState !== WebSocket.OPEN) {
                    alert("socket not connected");
                    return;
                }

                var data = chatMessage.value;
                chatMessage.value = "";

                chatLog.innerHTML += '<div class="client-chat-entry chat-entry">' + htmlEscape(data) + '</div>';
                socket.send(data);
            }
        });

        sendChatButton.addEventListener("click", function () {
            if (!socket || socket.readyState !== WebSocket.OPEN) {
                alert("socket not connected");
                return;
            }

            var data = chatMessage.value;
            chatMessage.value = "";

            chatLog.innerHTML += '<div class="client-chat-entry chat-entry">' + htmlEscape(data) + '</div>';
            socket.send(data);
        });

        closeButton.addEventListener("click", function () {
            if (!socket || socket.readyState !== WebSocket.OPEN) {
                alert("webSocket not connected");
            }

            socket.close(1000, "Closing from client");
        });

        function htmlEscape(str) {
            return str.toString()
                .replace(/&/g, '&amp;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#39;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;');
        }

    </script>
</div>
